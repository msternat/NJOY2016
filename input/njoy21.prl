#!/usr/bin/perl
#
# usage: njoy21.prl {job}
#
# check number of input arguments
#
if( $#ARGV > 2 || $#ARGV < 0 ) { 
       print "Error: NJOY21 called with invalid number of arguments\n";
       print "Usage: NJOY21 {job} \n";
       die "njoy21 script aborted\n";
}
      use Env;
      $system = $ENV{ 'SYSTEMTYPE' };
#      require "ctime.pl";
# print "NJOY21 invoked with SYSTEMTYPE = $1=\n";
# print "NJOY21 ENV conversion = $system=\n";
# print "space for checking\n";

      $user       = `whoami`;
      $opsys      = "UNIX";
      $type       = `uname -pris`;
      $machine    = `uname -n`;
      $rm         = "rm -f";
      $sep        = "/";
      $cpx        = "cp -f -p";        
      $mv         = "mv";
      $executable = "njoy21";

      chomp($pwd);
      chomp($user);
      chomp($machine);
      chomp($type);

      $ar = 0;
      $nar = 2;
      $job = $ARGV[$ar];
      ++$ar;
      $isotope = $ARGV[$ar];

      $numarg = $#ARGV + 1;
      if ($numarg == 1) {
          $isotope = "dummy";
      } elsif  ($numarg != $nar) {
          print "\n\n   illegal number of arguments, arguments = $numarg  \n";
          print "   usage: $0 {job} {isotope} \n";
          die "   try again $!\n";
      }

#      $date = &ctime(time);
      $date = "today";
      chomp($date);
   
    $job = $ARGV[0];
#    print "spacer one job = $job\n";
#    print "Test inputs one=$ARGV[0] tail \n";

#
#   export job and type for use in the njoy21 executable
#
    $ENV{njoy21_JOB} = $job;

    if( $deb eq "deb" && $par eq "par" ) {
      $run_type = "njoy21 parallel debug";
    } elsif( $par eq "par" ) {
      $run_type = "njoy21 parallel";
    } elsif( $deb eq "deb" ) {
      $run_type = "njoy21 debug";
    } else {
      $run_type = "njoy21 single-processor";
    }
    $ENV{RUN_TYPE} = $run_type;

#     Note: this definition of root is obsolete, and used only for 
#     recoil
      $root = "..".$sep;
      $recoilbase    = $root."isotope".$sep."recoil".$sep."library".$sep."raw".$sep.$isotope.$sep;
      $recoilfile    = $root."isotope".$sep."recoil".$sep."library".$sep."raw".$sep.$isotope;

      $base        = "..".$sep;
      $spcbase = "..".$sep;
      $bin_dir     = $base."bin";
      $input_dir   = $spcbase."input";
      $output_dir  = $spcbase."output";
      $groupr_dir   = $spcbase."output".$sep."groupr";
      $punch_dir   = $spcbase."output".$sep."punch";
      $library_dir = $base."library";
      $correlation_dir = $base."correlation";
      $src_dir = $base."source";
      $Git_dir = $base."Git_Clone".$sep."NJOY21".$sep."bin";

      $njoy_xsc_ENDFB6 = $root."xsec".$sep."ENDFB6";
      $ENV{njoy_xsc_ENDFB6} = $njoy_xsc_ENDFB6;

      $njoy_xsc_SNLRML = $root."xsec".$sep."SNLRML-II";
      $ENV{njoy_xsc_SNLRML} = $njoy_xsc_SNLRML;

      $njoy_xsc_spc = $root."xsec".$sep."special";
      $ENV{njoy_xsc_spc} = $njoy_xsc_spc;

      $njoy_xsc_JENDL = $root."xsec".$sep."JENDL";
      $ENV{njoy_xsc_JENDL} = $njoy_xsc_JENDL;

      $njoy_xsc_JENDLD = $root."xsec".$sep."JENDL-D99".$sep."DATA".$sep."EACH";
      $ENV{njoy_xsc_JENDLD} = $njoy_xsc_JENDLD;

      $njoy_xsc_CENDL = $root."xsec".$sep."CENDL";
      $ENV{njoy_xsc_CENDL} = $njoy_xsc_CENDL;

      $njoy_xsc_BROND = $root."xsec".$sep."BROND";
      $ENV{njoy_xsc_BROND} = $njoy_xsc_BROND;

      $njoy_xsc_JEFF22 = $root."xsec".$sep."JEFF22";
      $ENV{njoy_xsc_JEFF22} = $njoy_xsc_JEFF22;

      $njoy_xsc_IRDF90 = $root."xsec".$sep."IRDF90";
      $ENV{njoy_xsc_IRDF90} = $njoy_xsc_IRDF90;

      $njoy_xsc_GLUCS = $root."xsec".$sep."GLUCS";
      $ENV{njoy_xsc_GLUCS} = $njoy_xsc_GLUCS;

      $njoy_xsc_RNAL = $root."xsec".$sep."RNAL";
      $ENV{njoy_xsc_RNAL} = $njoy_xsc_RNAL;

      $njoy_xsc_FENDLD = $root."xsec".$sep."FENDL".$sep."dosimetry";
      $ENV{njoy_xsc_FENDLD} = $njoy_xsc_FENDLD;

      $njoy_xsc_FENDLA = $root."xsec".$sep."FENDL".$sep."activation";
      $ENV{njoy_xsc_FENDLA} = $njoy_xsc_FENDLA;

      $njoy_xsc_test = $root."xsec".$sep."test";
      $ENV{njoy_xsc_test} = $njoy_xsc_test;

#
#     form work_dir from snl-work and username if unix, else use snl-work
#
      $work_dir = $base."snl-work-".substr($user,0,3);
#
#     print out preamble 
#
      print "\n";
      print "njoy21 script running njoy21\n\n\n";
      print "  njoy21: SNL version 1.0 (beta)\n";
      print "  Op. Sys           = $opsys \n";
      print "  System type       = $type \n";
      print "  Run type          = $run_type \n";
      print "  User              = $user \n";
      print "  Machine           = $machine \n";
      print "  Working directory = $work_dir \n";
      print "  Current date      = $date \n";
      print "  Job name          = $job \n ";

      print "\n";
      print "  script            = ", $0, "\n";
#      print "  Working directory = $dir \n";
      $eol = "\n";

#
# with user working dir, need to test for existence
#
      if (-d $work_dir) {

          chdir ($work_dir);

      } else {

        if ( mkdir ($work_dir,0777) ) {
            chdir ($work_dir);
        } else {
          print "Error - ${work_dir} could not be created, using snl-work\n";
          $work_dir = $base.$sep."snl-work";
          chdir ($work_dir);
        }

      }

#
#     delete any old executable and bring current executable 
#     into working directory.  
#
      if( -e "$executable" ) {
          print "\nnjoy21 executable found and will be deleted \n\n";
          system("$rm ./$executable");
      } 
      else {
          print "njoy21 executable not found /n";
      }

      $command = "$cpx $Git_dir${sep}$executable $bin_dir${sep}$executable";
#      print "Git clone binary copy command: $command \n";
      system ("$command");

      system("$cpx $bin_dir${sep}$executable .") == 0 || die
         "Cannot open file $bin_dir${sep}$executable\n" ;

#
#     write user_name
#
      if( -e "username" ) {
        system("$rm username");
      }
      $filename = "username";
      open(envout,">$filename") || die "Cannot open file $filename: $!\n";
      $record = "$user \n";
      $LEN = length($record);
      $wr1 = syswrite(envout,$record,$LEN,0);
            die "System write error: $!\n"
                  unless defined $wr1;
      close (envout);
#
#     write run date.  call file date.tmp to prevent collisions with
#     the date command
#
      if( -e "date.tmp" ) {
         system("$rm date.tmp");
      }
      $filename = "date.tmp";
      open(envout,">$filename") || die "Cannot open file $filename: $!\n";
      $record = "$date \n";
      $LEN = length($record);
      $wr1 = syswrite(envout,$record,$LEN,0);
            die "System write error: $!\n"
                  unless defined $wr1;
      close (envout);
#
#     write operating system
#
      if( -e "opsys" ) {
        system("$rm opsys");
      }
      $filename = "opsys";
      open(envout,">$filename") || die "Cannot open file $filename: $!\n";
      $record = "$opsys \n";
      $LEN = length($record);
      $wr1 = syswrite(envout,$record,$LEN,0);
            die "System write error: $!\n"
                  unless defined $wr1;
      close (envout);
#      exit;
#
#     write working directory
#
      if( -e "getcwd" ) {
        system("$rm getcwd");
      }
      $filename = "getcwd";
      open(envout,">$filename") || die "Cannot open file $filename: $!\n";
      $record = "$work_dir \n";
      $LEN = length($record);
      $wr1 = syswrite(envout,$record,$LEN,0);
            die "System write error: $!\n"
                  unless defined $wr1;
      close (envout);
#
#     write machine name
#
      if( -e "machine" ) {
        system("$rm machine");
      }
      $filename = "machine";
      open(envout,">$filename") || die "Cannot open file $filename: $!\n";
      $record = "$machine \n";
      $LEN = length($record);
      $wr1 = syswrite(envout,$record,$LEN,0);
            die "System write error: $!\n"
                  unless defined $wr1;
      close (envout);

      chmod (0777, "machine", "username", "opsys", "date.tmp", "getcwd" );

      $filout = "0*";
      if  (-e $filout ) {
          system("rm -f $work_dir/0*");
      }
      $filout = "temp*";
      if  (-e $filout ) {
          system("rm -f $work_dir/temp*");
      }
      $filout = "1*";
      if  (-e $filout ) {
          system("rm -f $work_dir/1*");
      }
      $filout = "std*";
      if  (-e $filout ) {
          system("rm -f $work_dir/std*");
      }
      $filout = "misc";
      if  (-e $filout ) {
          system("rm -f $work_dir/misc");
      }
      $filout = "index";
      if  (-e $filout ) {
          system("rm -f $work_dir/index");
      }

#
#    copy input file to njoy21 input
#
#      $filout = "input";
#      unlink($filout);

#      $command = "pwd";
#      print "command instruction = $command\n";
#      system ("$command");

#      $command = "cp ../bin/njoy21 njoy21";
#      print "command instruction = $command\n";
#      system ("$command");

      system("$cpx $input_dir${sep}${job}.inp njoy21.inp") == 0 || die
        "Cannot open ${job}.inp\n" ;
      system("$cpx njoy21.inp njoy21.copy");
      system("$cpx njoy21.inp input");

#
#    preprocess input module
#
     &prepro;
#
#    run njoy21 executable
#
     system("./$executable <input >log 2>output");

#
#     save output files
#
      $filout = "output";
      if  (-r $filout ) {
#        output found - run OK
         print "output file successfully created \n\n";
        $command = "$cpx output $output_dir${sep}${job}.out";
#        print "output transfer command instruction = $command\n";
        system ("$command");
      }
      else {
          print " \n \n Probable ERROR stage-2 ${filout} file does not exist \n \n";
          die "   try again $!\n";
      }
#
      $filout = "log";
      if  (-r $filout ) {
#        log found - run OK
         print "log file successfully created \n";
        $command = "$cpx log $output_dir${sep}${job}.log";
#        print "log transfer command instruction = $command\n\n";
        system ("$command");
      }
      else {
          print " \n \n Probable ERROR stage-2 ${filout} file does not exist \n \n";
          die "   try again $!\n";
      }

#
#     post-process input commands
#
      &postpro;
#
#     Clean-up after run
#

      $filout = "input";
      if  (-e $filout ) {
          system("rm -f $work_dir/input");
      }

      $filout = "output";
      if  (-e $filout ) {
          system("rm -f $work_dir/output");
      }

      $filout = "log";
      if  (-e $filout ) {
          system("rm -f $work_dir/log");
      }

      while ( <temp*>  ) {
        system("$rm $_");
      }

#      while ( <tape*>  ) {
#        system("$rm $_");
#      }
      $filout = "*.log";
      if  (-e $filout ) {
          system("rm -f $work_dir/*.log");
      }
#      $filout = "*.inp";
#      if  (-e $filout ) {
#          system("rm -f $work_dir/*.inp");
#      }
      $filout = "date.tmp";
      if  (-e $filout ) {
          system("rm -f $work_dir/date.tmp");
      }
      $filout = "username";
      if  (-e $filout ) {
          system("rm -f $work_dir/username");
      }
      $filout = "opsys";
      if  (-e $filout ) {
          system("rm -f $work_dir/opsys");
      }
      $filout = "machine";
      if  (-e $filout ) {
          system("rm -f $work_dir/machine");
      }
      $filout = "getcwd";
      if  (-e $filout ) {
          system("rm -f $work_dir/getcwd");
      }
# temporarily stop clean-up of input file while testing
#      $filout = "njoy21.inp";
#      if  (-e $filout ) {
#          system("rm -f $work_dir/njoy21.inp");
#      }
#      $file = "${job}.inp";
#      system("rm -f $work_dir/${file}");

exit 0;
#
##   subroutine prepro, this routine preprocessed the input file
#
    sub prepro {
#           print "\n   this is the prepro input processor \n";
#
#          open file
#
          $indicate = "\'#\'";
          $echo = "echo";
          $cpxfix = "cp";
          $rmxfix = "rm";
          $cpx = "cp";
          $rmx = "rm";
          ${njoy_xsc_e6} = "Default";
          open(template, "$work_dir/input") 
                 || die "can't open template file: $!\n";
          while ($record=<template>) {
             $len = length($record);
             if ( $len > 3) {
                 $mat1 = substr($record,0,3);
                  if ( $mat1 eq $indicate) {
#                        print "EXTRACT = $record \n";
                        ($x1, $x2, $x3, $x4) = split(' ',$record,4);
                     if ($x2 eq $echo) {
                        print "$x3 $x4";
                     }  elsif ($x2 eq $cpxfix) {
                        $command = "$cpx $x3 $x4";
#                       print "COPY command: $command \n";
                        system("${command}");
#                       print "Copy finished \n";
                     }  elsif ($x2 eq $rmxfix) {
                        $command = "$rmx $x3 $x4";
#                       print "REMOVE command: $command \n";
                        system("${command}");
                     }  else {
                        print "Unknown prepro command: $x3 $x4";
                     }
                  }
             }
#             print "RECORD = $record \n";
          }
          close (template);
#
#          exit 99;
    }
#
##   subroutine postpro, this routine postprocesses the input file
#
    sub postpro {
#           print "\n   this is the postpro input processor \n";
#
#          open file
#
          $indicate = "\'@\'";
          $echo = "echo";
          $cpxfix = "cp";
          $rmxfix = "rm";
          $mvfix = "mv";
          $cpx = "cp";
          $rmx = "rm";
          open(template, "$work_dir/input") 
                 || die "can't open template file: $!\n";
          while ($record=<template>) {
             $len = length($record);
             if ( $len > 3) {
                 $mat1 = substr($record,0,3);
                  if ( $mat1 eq $indicate) {
#                        print "EXTRACT = $record \n";
                        ($x1, $x2, $x3, $x4) = split(' ',$record,4);
                     if ($x2 eq $echo) {
                        print "$x3 $x4";
                     }  elsif ($x2 eq $cpxfix) {
                        $command = "cp $x3 $x4";
#                       print "COPY command: $command \n";
                        system("${command}");
                     }  elsif ($x2 eq $mvfix) {
                        $command = "cp $x3 $x4";
#                       print "MOVE command: $command \n";
                        system("${command}");
                     }  elsif ($x2 eq $rmxfix) {
                        $command = "rm $x3 $x4";
#                       print "REMOVE command: $command \n";
                        system("${command}");
                     }  else {
                        print "Unknown postpro command: $x3 $x4";
                     }
                  }
             }
#             print "RECORD = $record \n";
          }
          close (template);
#
    }
